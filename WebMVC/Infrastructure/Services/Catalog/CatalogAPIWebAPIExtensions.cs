// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CatalogAPIWebAPI.
    /// </summary>
    public static partial class CatalogAPIWebAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='size'>
            /// </param>
            /// <param name='index'>
            /// </param>
            public static IList<Message> GetAllMessages(this ICatalogAPIWebAPI operations, int? size = 5, int? index = 1)
            {
                return operations.GetAllMessagesAsync(size, index).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='size'>
            /// </param>
            /// <param name='index'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Message>> GetAllMessagesAsync(this ICatalogAPIWebAPI operations, int? size = 5, int? index = 1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllMessagesWithHttpMessagesAsync(size, index, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            public static object ReplaceMessage(this ICatalogAPIWebAPI operations, Message message = default(Message))
            {
                return operations.ReplaceMessageAsync(message).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ReplaceMessageAsync(this ICatalogAPIWebAPI operations, Message message = default(Message), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceMessageWithHttpMessagesAsync(message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            public static object CreateMessage(this ICatalogAPIWebAPI operations, Message message = default(Message))
            {
                return operations.CreateMessageAsync(message).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateMessageAsync(this ICatalogAPIWebAPI operations, Message message = default(Message), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMessageWithHttpMessagesAsync(message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetMessage(this ICatalogAPIWebAPI operations, int id)
            {
                return operations.GetMessageAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMessageAsync(this ICatalogAPIWebAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessageWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ProblemDetails DeleteMessage(this ICatalogAPIWebAPI operations, int id)
            {
                return operations.DeleteMessageAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> DeleteMessageAsync(this ICatalogAPIWebAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteMessageWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='patch'>
            /// </param>
            public static object UpdateMessage(this ICatalogAPIWebAPI operations, int id, IList<Operation> patch = default(IList<Operation>))
            {
                return operations.UpdateMessageAsync(id, patch).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='patch'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateMessageAsync(this ICatalogAPIWebAPI operations, int id, IList<Operation> patch = default(IList<Operation>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMessageWithHttpMessagesAsync(id, patch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
